FROM node:22-alpine

WORKDIR /app

# Install necessary tools
RUN apk add --no-cache openssl
# Install the specific pnpm version used by the project
RUN npm install -g pnpm@10.15.0
# Install tsx for running the worker
RUN npm install -g tsx@4.20.0

# Copy all package manager files first for caching
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml .npmrc* ./

# Create directory structure and copy package.json files
COPY apps/web/package.json apps/web/package.json
COPY apps/unsubscriber/package.json apps/unsubscriber/package.json
COPY packages/loops/package.json packages/loops/package.json
COPY packages/resend/package.json packages/resend/package.json
COPY packages/tinybird/package.json packages/tinybird/package.json
COPY packages/tinybird-ai-analytics/package.json packages/tinybird-ai-analytics/package.json
COPY packages/tsconfig/package.json packages/tsconfig/package.json

# Copy patches directory so patches can be applied during install
COPY patches/ patches/

# Copy Prisma schema file needed for postinstall script
COPY apps/web/prisma/schema.prisma apps/web/prisma/schema.prisma

# Install ALL dependencies (including dev, no pruning)
# Remove --ignore-scripts to allow patches to be applied
# Use --no-frozen-lockfile to allow lockfile updates for patches
RUN pnpm install --no-frozen-lockfile --prefer-offline

# Copy the rest of the application code FIRST
COPY . .


# Run Prisma generate with build-time variables (cached)
RUN pnpm --filter inbox-zero-ai exec -- prisma generate

# Set NODE_ENV for build and runtime
ENV NODE_ENV=production

# Accept build-time arguments for all NEXT_PUBLIC variables
# Users can override any of these during build
ARG NEXT_PUBLIC_BASE_URL="http://localhost:3000"

# Provide dummy build-time ENV VARS (Still needed for build)
ENV DATABASE_URL="postgresql://dummy:dummy@dummy:5432/dummy?schema=public"
ENV DIRECT_URL="postgresql://dummy:dummy@dummy:5432/dummy?schema=public"
ENV AUTH_SECRET="dummy_secret_for_build_only"
ENV GOOGLE_CLIENT_ID="dummy_id_for_build_only"
ENV GOOGLE_CLIENT_SECRET="dummy_secret_for_build_only"
ENV EMAIL_ENCRYPT_SECRET="dummy_encrypt_secret_for_build_only"
ENV EMAIL_ENCRYPT_SALT="dummy_encrypt_salt_for_build_only"
ENV GOOGLE_PUBSUB_TOPIC_NAME="dummy_topic_for_build_only"
ENV GOOGLE_PUBSUB_VERIFICATION_TOKEN="dummy_pubsub_token_for_build"
ENV INTERNAL_API_KEY="dummy_apikey_for_build_only"
ENV API_KEY_SALT="dummy_salt_for_build_only"
ENV UPSTASH_REDIS_URL="http://dummy-redis-for-build:6379"
ENV UPSTASH_REDIS_TOKEN="dummy_redis_token_for_build"
ENV REDIS_URL="redis://dummy:dummy@dummy:6379"
ENV QSTASH_TOKEN="dummy_qstash_token_for_build"
ENV QSTASH_CURRENT_SIGNING_KEY="dummy_qstash_curr_key_for_build"
ENV QSTASH_NEXT_SIGNING_KEY="dummy_qstash_next_key_for_build"

# Set NEXT_PUBLIC env vars from ARGs (users can override these)
ENV NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}

# Ensure prisma generate runs
RUN pnpm --filter inbox-zero-ai exec -- next build

EXPOSE 3000

# Set the default command to start the production server
# Use the simpler pnpm command, should work now as pnpm & next are installed
CMD pnpm --filter inbox-zero-ai start 
